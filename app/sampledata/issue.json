{
  "issues": [
    {
      "title": "Provide capacity parameter to channel operators",
      "number": "#841",
      "createdAt": "3 days ago",
      "closed": false,
      "body": "See https://stackoverflow.com/questions/53282761/kotlin-coroutines-how-to-use-array-channel-with-filter-map\n\nWhile it could be useful in general, this feature should not be implemented before cold streams (#254) for the same reason why these operators are marked as \"obsolete\"",
      "author": "qwwdfsad",
      "labels": [
        "postponed"
      ]
    },
    {
      "title": "Dispatchers.Default consumes too much CPU in the face of short bursts of work",
      "number": "#840",
      "createdAt": "3 days ago",
      "closed": false,
      "body": "See https://discuss.kotlinlang.org/t/default-dispatcher-creates-too-many-threads/10143\n\nCoroutineScheduler may consume too much CPU when there is no work to do (a lot of spins, yields and short parks before the transition to the idle state). What even worse, it can burn a lot of CPU in the pattern \"a short burst of work, small idle period\" (I remember @e5l has noticed that as well).\n\nWe should increase the speed of spinning -> idle transition, ideally without losing any performance for task-heavy benchmarks.\n\nWe probably can safely remove yield usages (this is the most suspicious place) and try to gracefully detect quiescent period",
      "author": "qwwdfsad",
      "labels": [
        "enhancement"
      ]
    },
    {
      "title": "CoroutineExceptionHandler is invoked from a random thread",
      "number": "#839",
      "createdAt": "4 days ago",
      "closed": false,
      "body": "I got this exception on Android while playing around with options for handling errors.\n\nIt doesn't like me giving a CoroutineExceptionHandler into a GlobalScope.launch.",
      "author": "ScottPierce",
      "labels": [
        "question",
        "enhancement",
        "design"
      ]
    },
    {
      "title": "gradle dependencies fails for kotlinx-coroutines-core-native",
      "number": "#831",
      "createdAt": "5 days ago",
      "closed": true,
      "body": "The code compiles and runs, but ./gradlew dependencies fails for the org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.0.1 dependency.\n\nTested with both gradle 4.7 and 4.10.2 with enableFeaturePreview(\"GRADLE_METADATA\")\n\nBecause the dependencies task fails the gradle panel in the IDE is showing red underlines under the project.\n\n",
      "author": "jurmous",
      "labels": []
    },
    {
      "title": "Joining multiple jobs in a context can cause leaked jobs",
      "number": "#827",
      "createdAt": "6 days ago",
      "closed": true,
      "body": "Take the following code as an example:\n\n",
      "author": "emanguy",
      "labels": [
        "question"
      ]
    },
    {
      "title": "JavaFx 1.0.1 Using jdk 8 causing java.lang.ExceptionInInitializerError",
      "number": "#827",
      "createdAt": "7 days ago",
      "closed": true,
      "body": "In JDK 8, initPlatform platform class need to be com.sun.javafx.application.PlatformImpl. This is because javafx.application.Platform doesn't have a method called startup, and would simply crash in java.lang.ExceptionInInitializerError.\n\n",
      "author": "hendraanggrian",
      "labels": []
    }
  ]
}