fragment Repository on Repository {
    # Returns the code of conduct for this repository
    codeOfConduct {
        ... CodeOfConduct
    }
    # Identifies the date and time when the object was created.
    createdAt
    # The Ref associated with the repository's default branch.
    defaultBranchRef {
        ... Ref
    }
    # The description of the repository.
    description
    # The description of the repository rendered to HTML.
    descriptionHTML
    # The number of kilobytes this repository occupies on disk.
    diskUsage
    # Returns how many forks there are of this repository in the whole network.
    forkCount
    # Indicates if the repository has issues feature enabled.
    hasIssuesEnabled
    # Indicates if the repository has wiki feature enabled.
    hasWikiEnabled
    # The repository's URL.
    homepageUrl
    id
    # Indicates if the repository is unmaintained.
    isArchived
    # Identifies if the repository is a fork.
    isFork
    # Indicates if the repository has been locked or not.
    isLocked
    # Identifies if the repository is a mirror.
    isMirror
    # Identifies if the repository is private.
    isPrivate
    # Identifies if the repository is a template that can be used to generate new repositories.
    isTemplate
    # The license associated with the repository
    licenseInfo {
        ... License
    }
    # The reason the repository has been locked.
    lockReason
    # Whether or not PRs are merged with a merge commit on this repository.
    mergeCommitAllowed
    # The repository's original mirror URL.
    mirrorUrl
    # The name of the repository.
    name
    # The repository's name with owner.
    nameWithOwner
    # The image used to represent this repository in Open Graph data.
    openGraphImageUrl
    # The User owner of the repository.
    owner {
        ... RepositoryOwner
    }
    # The repository parent, if this is a fork.
    parent {
        ... ParentOfForkedRepository
    }
    # The primary language of the repository's code.
    primaryLanguage {
        ... Language
    }
    # A list containing a breakdown of the language composition of the repository.
    languages(first: 20, orderBy: {field: SIZE, direction: DESC}) {
        totalSize
        nodes {
            ... Language
        }
        edges {
            ... LanguageEdge
        }
    }
    # Identifies when the repository was last pushed to.
    pushedAt
    # Whether or not rebase-merging is enabled on this repository.
    rebaseMergeAllowed
    # The HTTP path for this repository
    resourcePath
    # A description of the repository, rendered to HTML without any links in it.
    shortDescriptionHTML
    # Whether or not squash-merging is enabled on this repository.
    squashMergeAllowed
    # The SSH URL to clone this repository
    sshUrl
    # The repository from which this repository was generated, if any.
    templateRepository {
        ... ParentOfForkedRepository
    }
    # Identifies the date and time when the object was last updated.
    updatedAt
    # The HTTP URL for this repository
    url
    # Whether this repository has a custom image to use with Open Graph as opposed
    # to being represented by the owner's avatar.
    usesCustomOpenGraphImage
    # Indicates whether the viewer has admin permissions on this repository.
    viewerCanAdminister
    # Check if the viewer is able to change their subscription status for the repository.
    viewerCanSubscribe
    # Indicates whether the viewer can update the topics of this repository.
    viewerCanUpdateTopics
    # Returns a boolean indicating whether the viewing user has starred this starrable.
    viewerHasStarred
    # The users permission level on the repository. Will return null if authenticated as an GitHub App.
    viewerPermission
    # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
    viewerSubscription
    stargazers {
        totalCount
    }
    issues {
        totalCount
    }
    pullRequests {
        totalCount
    }
    watchers {
        totalCount
    }
    releases {
        totalCount
    }
    refs(first: 20, refPrefix: "refs/heads/") {
        totalCount
    }
    repositoryTopics(first: 9) {
        nodes {
            ... RepositoryTopic
        }
        totalCount
    }
}