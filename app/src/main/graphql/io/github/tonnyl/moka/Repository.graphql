# An abstract info of repository. Suggested using for a repository card.
fragment abstractRepository on Repository {
  createdAt
  databaseId
  description
  descriptionHTML
  homepageUrl
  id
  name
  nameWithOwner
  pushedAt
  resourcePath
  shortDescriptionHTML
  updatedAt
  url
  viewerHasStarred
  issues {
    totalCount
  }
  pullRequests {
    totalCount
  }
  watchers {
    totalCount
  }
  forks {
    totalCount
  }
  stargazers {
    totalCount
  }
  primaryLanguage {
    color
    name
  }
  owner {
    avatarUrl
    id
    login
    resourcePath
    url
  }
}

# A list of repositories this user has pinned to their profile
query pinnedRepositories($login: String!) {
  user(login: $login) {
    avatarUrl
    id
   	pinnedRepositories(first: 100) {
    	nodes {
          createdAt
          databaseId
          description
          descriptionHTML
          diskUsage
          forkCount
          hasIssuesEnabled
          hasWikiEnabled
          homepageUrl
          id
          isArchived
          isFork
          isLocked
          isMirror
          isPrivate
          licenseInfo {
            featured
            hidden
            id
            name
            nickname
            spdxId
            url
          }
          mergeCommitAllowed
          mirrorUrl
          name
          nameWithOwner
          projectsResourcePath
          projectsUrl
          pushedAt
          rebaseMergeAllowed
          resourcePath
          shortDescriptionHTML
          squashMergeAllowed
          updatedAt
          url
          viewerCanAdminister
          viewerCanCreateProjects
          viewerCanSubscribe
          viewerCanUpdateTopics
          viewerHasStarred
        	issues {
            totalCount
          }
        	pullRequests {
            totalCount
          }
        	watchers {
            totalCount
          }
        	forks {
            totalCount
          }
          stargazers {
            totalCount
          }
          primaryLanguage {
            color
            name
          }
        }
      totalCount
      totalDiskUsage
  	}
  }
}

# Lookup a given repository by the owner(USER) and repository name.
query userRepositoryCardInfo($login: String!, $repositoryName:String!) {
  user(login: $login) {
    avatarUrl
    id
   	repository(name: $repositoryName) {
    	createdAt
      databaseId
      description
      descriptionHTML
      homepageUrl
      id
      name
      nameWithOwner
      pushedAt
      resourcePath
      shortDescriptionHTML
      updatedAt
      url
      issues {
        totalCount
      }
      pullRequests {
        totalCount
      }
      watchers {
        totalCount
      }
      forks {
        totalCount
      }
      stargazers {
        totalCount
      }
      primaryLanguage {
        color
        name
      }
  	}
  }
}

# Lookup a given repository by the owner(ORGANIZATION) and repository name.
query orgRepositoryCardInfo($login: String!, $repositoryName:String!) {
  organization(login: $login) {
    avatarUrl
    id
   	repository(name: $repositoryName) {
    	createdAt
      databaseId
      description
      descriptionHTML
      homepageUrl
      id
      name
      nameWithOwner
      pushedAt
      resourcePath
      shortDescriptionHTML
      updatedAt
      url
      issues {
        totalCount
      }
      pullRequests {
        totalCount
      }
      watchers {
        totalCount
      }
      forks {
        totalCount
      }
      stargazers {
        totalCount
      }
      primaryLanguage {
        color
        name
      }
  	}
  }
}

# Repositories that the user has starred.
query starredRepositories(
  $login: String!,
  $perPage: Int!
  $after: String,
  $before: String
) {
  user(login: $login) {
    avatarUrl
    id
    starredRepositories(
      first: $perPage,
      after: $after,
      before: $before
    ) {
      nodes {
        ...abstractRepository
      }
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
}


# A list of repositories that the user owns.
query ownedRepositories(
  $login: String!,
  $perPage: Int!
  $after: String,
  $before: String
) {
  user(login: $login) {
    avatarUrl
    id
    repositories(
      first: $perPage,
      after: $after,
      before: $before
    ) {
      nodes {
        ...abstractRepository
      }
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
}

# A repository contains the content for a project.
query repository($login: String!, $repoName:String!) {
  user(login: $login){
    id
    avatarUrl
    name
    login
    viewerIsFollowing
    viewerCanFollow
    repository(name: $repoName) {
      codeOfConduct {
        body
        key
        name
        url
      }
      createdAt
      databaseId
      defaultBranchRef {
        id
        name
        prefix
        target {
          abbreviatedOid
          commitResourcePath
          commitUrl
          id
          oid
        }
      }
      description
      descriptionHTML
      diskUsage
      forkCount
      hasIssuesEnabled
      hasWikiEnabled
      homepageUrl
      id
      isArchived
      isFork
      isLocked
      isMirror
      isPrivate
      licenseInfo {
        body
        conditions {
          description
          key
          label
        }
        description
        featured
        hidden
        id
        implementation
        key
        limitations {
          description
          key
          label
        }
        name
        nickname
        permissions {
          description
          key
          label
        }
        pseudoLicense
        spdxId
        url
      }
      lockReason
      mergeCommitAllowed
      mirrorUrl
      name
      nameWithOwner
      owner {
        id
        avatarUrl
        login
        resourcePath
        url
      }
      parent {
        url
        name
        nameWithOwner
      }
      primaryLanguage {
        color
        id
        name
      }
      projectsResourcePath
      projectsUrl
      pushedAt
      rebaseMergeAllowed
      resourcePath
      shortDescriptionHTML
      squashMergeAllowed
      sshUrl
      updatedAt
      url
      viewerCanAdminister
      viewerCanCreateProjects
      viewerCanSubscribe
      viewerCanUpdateTopics
      viewerHasStarred
      viewerPermission
      viewerSubscription
      forks {
        totalCount
      }
      stargazers {
        totalCount
      }
      issues {
        totalCount
      }
      pullRequests {
        totalCount
      }
      watchers {
        totalCount
      }
      projects {
        totalCount
      }
    }
  }
}

query branches($owner: String!, $reposName: String!) {
  repository(owner: $owner, name: $reposName) {
    refs(refPrefix: "refs/heads/", first: 100) {
      nodes {
        id
        prefix
        name
        target {
          ... on Commit {
            author {
              name
            }
            message
          }
        }
      }
    }
  }
}

fragment BlobAbstract on Blob {
  byteSize
  isBinary
  id
}

fragment TreeAbstract on Tree {
  id
  entries {
    name
    mode
    type
  }
}

query currentLevelTreeView($login: String!, $repoName: String!, $expression: String!) {
  repository(owner: $login, name: $repoName) {
    object(expression: $expression) {
      ... BlobAbstract
      ... TreeAbstract
    }
  }
}

fragment FileTextAbstract on Blob {
  text
}

query fileContent($login: String!, $repoName: String!, $expression: String!) {
  repository(owner: $login, name: $repoName) {
    object(expression: $expression) {
      id
      ... FileTextAbstract
    }
  }
}