fragment IssuePullRequestTimelineItemBotFragment on Bot {
    # A URL pointing to the GitHub App's public avatar.
    avatarUrl
    # The username of the actor.
    login
    # The HTTP URL for this bot
    url
    id
}

fragment IssuePullRequestTimelineItemMannequinFragment on Mannequin {
    # A URL pointing to the GitHub App's public avatar.
    avatarUrl
    # The username of the actor.
    login
    # The URL to this resource.
    url
    id
}

fragment IssuePullRequestTimelineItemOrganizationFragment on Organization {
    # A URL pointing to the organization's public avatar.
    avatarUrl
    # The organization's login name.
    login
    # The organization's public profile name.
    name
    # The HTTP URL for this organization.
    url
    id
}

fragment IssuePullRequestTimelineItemUserFragment on User {
    # A URL pointing to the user's public avatar.
    avatarUrl
    # The username used to login.
    login
    # The user's public profile name.
    name
    # The HTTP URL for this user
    url
    id
}

fragment IssuePullRequestTimelineItemTeamFragment on Team {
    # A URL pointing to the team's avatar.
    avatarUrl
    # The slug corresponding to the organization and team.
    combinedSlug
    # The name of the team.
    name
    # The HTTP URL for this team
    url
    id
}

# Issue that made the reference.
fragment ReferencedEventIssueFragment on Issue {
    # Identifies the issue title.
    title
    # Identifies the issue number.
    number
    id
}

# Pull request that made the reference.
fragment ReferencedEventPullRequestFragment on PullRequest {
    # Identifies the pull request title.
    title
    # Identifies the pull request number.
    number
    id
}

# Object referenced by event.
fragment MilestoneItemIssueFragment on Issue {
    # Identifies the issue title.
    title
    # Identifies the issue number.
    number
    id
    # The HTTP URL for this issue
    url
}

# Object referenced by event.
fragment MilestoneItemPullRequestFragment on PullRequest {
    # Identifies the pull request title.
    title
    # Identifies the pull request number.
    number
    id
    # The HTTP URL for this pull request
    url
}

fragment IssuePullRequestTimelineItemAssigneeFragment on Assignee {
    __typename
    # A special type of user which takes actions on behalf of GitHub Apps.
    ... IssuePullRequestTimelineItemBotFragment
    # A placeholder user for attribution of imported data on GitHub.
    ... IssuePullRequestTimelineItemMannequinFragment
    # An account on GitHub, with one or more owners, that has repositories, members and teams.
    ... IssuePullRequestTimelineItemOrganizationFragment
    # A user is an individual's account on GitHub that owns repositories and can make new content.
    ... IssuePullRequestTimelineItemUserFragment
}

# fragment IssuePrProjectFragment on Project {
#   id
#   name
#   number
#   closed
#   state
# }

# A column inside a project.
# fragment IssuePrProjectColumnFragment on ProjectColumn {
#   # Identifies the date and time when the object was created.
#   createdAt
#   id
#   # The project column's name.
#   name
#   # The semantic purpose of the column
#   purpose
#   # Identifies the date and time when the object was last updated.
#   updatedAt
#   # The HTTP URL for this project column
#   url
# }

# A card in a project.
# fragment IssuePrProjectCardFragment on ProjectCard {
#   # The project column this card is associated under. A card may only belong to one project column at a time.
#   # The column field will be null if the card is created in a pending state and has yet to be associated with a column.
#   # Once cards are associated with a column, they will not become pending in the future.
#   column {
#     ... IssuePrProjectColumnFragment
#   }
#   # Identifies the date and time when the object was created.
#   createdAt
#   # The actor who created this card
#   creator {
#     ... Actor
#   }
#   id
#   # Whether the card is archived
#   isArchived
#   # The card note
#   note
#   # The state of ProjectCard
#   state
#   # Identifies the date and time when the object was last updated.
#   updatedAt
# }

# A label for categorizing Issues or Milestones with a given Repository.
fragment IssuePrLabelFragment on Label {
    # Identifies the label color.
    color
    id
    # Identifies the label name.
    name
    # The HTTP URL for this label.
    url
}

# Represents a Git commit.
fragment PullRequestTimelineItemCommitFragment on Commit {
    # Authorship details of the commit.
    author {
        ... GitActorFragment
    }
    # Committership details of the commit.
    committer {
        ... GitActorFragment
    }
    # The Git commit message
    message
    # The Git object ID
    oid
    # The HTTP URL for this commit
    url
}

# Represents a Git reference.
fragment PullRequestTimelineItemRefFragment on Ref {
    id
    # The ref name.
    name
    # The ref's prefix, such as refs/heads/ or refs/tags/.
    prefix
}

# A repository pull request.
fragment PullRequestTimelineItemPullRequest on PullRequest {
    # true if the pull request is closed
    closed
    # Identifies the pull request number.
    number
    id
    # Identifies the state of the pull request.
    state
    # Identifies the pull request title.
    title
    # The HTTP URL for this pull request.
    url
}

fragment PullRequestTimelineItemPullRequestReview on PullRequestReview {
    id
    author {
        ... Actor
    }
    url
}

# Represents triggered deployment instance.
fragment PullRequestTimelineItemDeploymentFragment on Deployment {
    # Identifies the commit sha of the deployment.
    commit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the oid of the deployment commit, even if the commit has been deleted.
    commitOid
    # Identifies the date and time when the object was created.
    createdAt
    # Identifies the actor who triggered the deployment.
    creator {
        ... Actor
    }
    # The deployment description.
    description
    # The environment to which this deployment was made.
    environment
    id
    # Identifies the Ref of the deployment, if the deployment was created by ref.
    ref {
        ... PullRequestTimelineItemRefFragment
    }
    # The current state of the deployment.
    state
    # The deployment task.
    task
    # Identifies the date and time when the object was last updated.
    updatedAt
}

fragment GitActorFragment on GitActor {
    # A URL pointing to the author's public avatar.
    avatarUrl
    # The email in the Git commit.
    email
    # The name in the Git commit.
    name
    user {
        ... IssuePullRequestTimelineItemUserFragment
    }
}

fragment AddedToProjectEventFragment on AddedToProjectEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Project referenced by event.
    # ... IssuePrProjectFragment
}

# Represents an 'assigned' event on any assignable object.
fragment AssignedEventFragment on AssignedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the user or mannequin that was assigned.
    assignee {
        ... IssuePullRequestTimelineItemAssigneeFragment
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents a 'closed' event on any `Closable`.
fragment ClosedEventFragment on ClosedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # The HTTP URL for this closed event.
    url
}

# Represents a 'comment_deleted' event on a given issue or pull request.
#fragment CommentDeletedEventFragment on CommentDeletedEvent {
#    # Identifies the actor who performed the event.
#    actor {
#        ... Actor
#    }
#    # Identifies the date and time when the object was created.
#    createdAt
#    id
#}

# Represents a 'converted_note_to_issue' event on a given issue or pull request.
fragment ConvertedNoteToIssueEventFragment on ConvertedNoteToIssueEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Project referenced by event.
    # ... IssuePrProjectFragment
}

# Represents a mention made by one issue or pull request to another.
fragment CrossReferencedEventFragment on CrossReferencedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    # Reference originated in a different repository.
    isCrossRepository
    id
    # Issue or pull request that made the reference.
    source {
        ... ReferencedEventIssueFragment
        ... ReferencedEventPullRequestFragment
    }
}

# Represents a 'demilestoned' event on a given issue or pull request.
fragment DemilestonedEventFragment on DemilestonedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the milestone title associated with the 'demilestoned' event.
    milestoneTitle
    # Object referenced by event.
    subject {
        ... MilestoneItemIssueFragment
        ... MilestoneItemPullRequestFragment
    }
}

# Represents a comment on an Issue.
fragment IssueCommentFragment on IssueComment {
    # The actor who authored the comment.
    author {
        ... Actor
    }
    # Author's association with the subject of the comment.
    authorAssociation
    # The body as Markdown.
    body
    # Identifies the date and time when the object was created.
    createdAt
    id
    # The actor who edited the comment.
    editor {
        ... Actor
    }
    # Check if the current viewer can delete this object.
    viewerCanDelete
    # Can user react to this subject
    viewerCanReact
    # Did the viewer author this comment.
    viewerDidAuthor
    # Check if the current viewer can update this object.
    viewerCanUpdate
    # Check if the current viewer can minimize this object.
    viewerCanMinimize
    # Reasons why the current viewer can not update this comment.
    viewerCannotUpdateReasons
}

# Represents a 'labeled' event on a given issue or pull request.
fragment LabeledEventFragment on LabeledEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the label associated with the 'labeled' event.
    label {
        ... IssuePrLabelFragment
    }
}

# Represents a 'locked' event on a given issue or pull request.
fragment LockedEventFragment on LockedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Reason that the conversation was locked (optional).
    lockReason
}

# Represents a 'marked_as_duplicate' event on a given issue or pull request.
fragment MarkedAsDuplicateEventFragment on MarkedAsDuplicateEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents a 'mentioned' event on a given issue or pull request.
#fragment MentionedEventFragment on MentionedEvent {
#    # Identifies the actor who performed the event.
#    actor {
#        ... Actor
#    }
#    # Identifies the date and time when the object was created.
#    createdAt
#    id
#}

# Represents a 'milestoned' event on a given issue or pull request.
fragment MilestonedEventFragment on MilestonedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the milestone title associated with the 'milestoned' event.
    milestoneTitle
}

# Represents a 'moved_columns_in_project' event on a given issue or pull request.
fragment MovedColumnsInProjectEventFragment on MovedColumnsInProjectEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Column name the issue or pull request was moved from.
    # Under preview
    # previousProjectColumnName
    # Column name the issue or pull request was moved to.
    # Under preview
    # projectColumnName
}

# Represents a 'pinned' event on a given issue or pull request.
fragment PinnedEventFragment on PinnedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents a 'referenced' event on a given `ReferencedSubject`.
fragment ReferencedEventFragment on ReferencedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Reference originated in a different repository.
    isCrossRepository
    # Checks if the commit message itself references the subject.
    # Can be false in the case of a commit comment reference.
    isDirectReference
    # Object referenced by event.
    subject {
        ... ReferencedEventIssueFragment
        ... ReferencedEventPullRequestFragment
    }
}

# Represents a 'removed_from_project' event on a given issue or pull request.
fragment RemovedFromProjectEventFragment on RemovedFromProjectEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Project referenced by event.
    # Under preview
    # project {
    #   ... IssuePrProjectFragment
    # }
    # Column name referenced by this project event.
    # Under preview
    # projectColumnName
}

# Represents a 'renamed' event on a given issue or pull request
fragment RenamedTitleEventFragment on RenamedTitleEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    # Identifies the current title of the issue or pull request.
    currentTitle
    id
    # Identifies the previous title of the issue or pull request.
    previousTitle
}

# Represents a 'reopened' event on any `Closable`.
fragment ReopenedEventFragment on ReopenedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents a 'subscribed' event on a given `Subscribable`.
#fragment SubscribedEventFragment on SubscribedEvent {
#    # Identifies the actor who performed the event.
#    actor {
#        ... Actor
#    }
#    # Identifies the date and time when the object was created.
#    createdAt
#    id
#}

# Represents a 'transferred' event on a given issue or pull request.
fragment TransferredEventFragment on TransferredEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    fromRepository {
        # The repository's name with owner.
        nameWithOwner
        owner {
            ... IssuePullRequestTimelineItemOrganizationFragment
            ... IssuePullRequestTimelineItemUserFragment
        }
    }
}

# Represents an 'unassigned' event on any assignable object.
fragment UnassignedEventFragment on UnassignedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the user or mannequin that was assigned.
    assignee {
        ... IssuePullRequestTimelineItemAssigneeFragment
    }
}

# Represents an 'unlabeled' event on a given issue or pull request.
fragment UnlabeledEventFragment on UnlabeledEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the label associated with the 'unlabeled' event.
    label {
        ... IssuePrLabelFragment
    }
}

# Represents an 'unlocked' event on a given issue or pull request.
fragment UnlockedEventFragment on UnlockedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents an 'unpinned' event on a given issue or pull request.
fragment UnpinnedEventFragment on UnpinnedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents an 'unsubscribed' event on a given `Subscribable`.
#fragment UnsubscribedEventFragment on UnsubscribedEvent {
#    # Identifies the actor who performed the event.
#    actor {
#        ... Actor
#    }
#    # Identifies the date and time when the object was created.
#    createdAt
#    id
#}

# Represents a 'user_blocked' event on a given user.
#fragment UserBlockedEventFragment on UserBlockedEvent {
#    # Identifies the actor who performed the event.
#    actor {
#        ... Actor
#    }
#    # Number of days that the user was blocked for.
#    blockDuration
#    # Identifies the date and time when the object was created.
#    createdAt
#    id
#    # The user who was blocked.
#    subject {
#        ... IssuePullRequestTimelineItemUserFragment
#    }
#}

# Represents a 'base_ref_changed' event on a given issue or pull request.
fragment BaseRefChangedEventFragment on BaseRefChangedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
}

# Represents a 'base_ref_force_pushed' event on a given pull request.
fragment BaseRefForcePushedEventFragment on BaseRefForcePushedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the after commit SHA for the 'base_ref_force_pushed' event.
    afterCommit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the before commit SHA for the 'base_ref_force_pushed' event.
    beforeCommit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
    ref {
        ... PullRequestTimelineItemRefFragment
    }
}

# Represents a 'deployed' event on a given pull request.
fragment DeployedEventFragment on DeployedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    # The deployment associated with the 'deployed' event.
    deployment {
        # The environment to which this deployment was made.
        ... PullRequestTimelineItemDeploymentFragment
    }
    id
    # PullRequest referenced by event.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # The ref associated with the 'deployed' event.
    ref {
        ... PullRequestTimelineItemRefFragment
    }
}

# Represents a 'deployment_environment_changed' event on a given pull request.
fragment DeploymentEnvironmentChangedEventFragment on DeploymentEnvironmentChangedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    # The deployment status that updated the deployment environment.
    deploymentStatus {
        # Identifies the deployment associated with status.
        deployment {
            ... PullRequestTimelineItemDeploymentFragment
        }
    }
    id
}

# Represents a 'head_ref_deleted' event on a given pull request.
fragment HeadRefDeletedEventFragment on HeadRefDeletedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the Ref associated with the head_ref_deleted event.
    headRef {
        ... PullRequestTimelineItemRefFragment
    }
    # Identifies the name of the Ref associated with the head_ref_deleted event.
    headRefName
}

# Represents a 'head_ref_force_pushed' event on a given pull request.
fragment HeadRefForcePushedEventFragment on HeadRefForcePushedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the after commit SHA for the 'head_ref_force_pushed' event.
    afterCommit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the before commit SHA for the 'head_ref_force_pushed' event.
    beforeCommit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # PullRequest referenced by event.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
    ref {
        ... PullRequestTimelineItemRefFragment
    }
}

# Represents a 'head_ref_restored' event on a given pull request.
fragment HeadRefRestoredEventFragment on HeadRefRestoredEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # PullRequest referenced by event.
    pullRequest {
        # Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
        baseRefName
        # Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
        headRefName
        ... PullRequestTimelineItemPullRequest
    }
}

# Represents a 'merged' event on a given pull request.
fragment MergedEventFragment on MergedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the commit associated with the merge event.
    commit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # Identifies the Ref associated with the merge event.
    mergeRef {
        ... PullRequestTimelineItemRefFragment
    }
    # Identifies the name of the Ref associated with the merge event.
    mergeRefName
    # PullRequest referenced by event.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # The HTTP URL for this merged event.
    url
}

# Represents a Git commit part of a pull request.
fragment PullRequestCommitFragment on PullRequestCommit {
    # The Git commit object
    commit {
        ... PullRequestTimelineItemCommitFragment
    }
    id
    # The pull request this commit belongs to
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # The HTTP URL for this pull request commit
    url
}

# Represents a commit comment thread part of a pull request.
fragment PullRequestCommitCommentThreadFragment on PullRequestCommitCommentThread {
    # The commit the comments were made on.
    commit {
        ... PullRequestTimelineItemCommitFragment
    }
    id
    # The file the comments were made on.
    path
    # The position in the diff for the commit that the comment was made on.
    position
    # The pull request this commit comment thread belongs to
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
}

# A review object for a given pull request.
fragment PullRequestReviewFragment on PullRequestReview {
    # The actor who authored the comment.
    author {
        ... Actor
    }
    # Author's association with the subject of the comment.
    authorAssociation
    # Identifies the pull request review body.
    body
    # The body of this review rendered to HTML.
    bodyHTML
    # Identifies the commit associated with this pull request review.
    commit {
        ... PullRequestTimelineItemCommitFragment
    }
    # Identifies the date and time when the object was created.
    createdAt
    # Check if this comment was created via an email reply.
    createdViaEmail
    # The actor who edited the comment.
    editor {
        ... Actor
    }
    id
    # Check if this comment was edited and includes an edit with the creation data
    includesCreatedEdit
    # The moment the editor made the last edit
    lastEditedAt
    # Identifies when the comment was published at.
    publishedAt
    # Identifies the pull request associated with this pull request review.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # Identifies the current state of the pull request review.
    state
    # Identifies when the Pull Request Review was submitted
    submittedAt
    # Identifies the date and time when the object was last updated.
    updatedAt
    # The HTTP URL permalink for this PullRequestReview.
    url
    # Check if the current viewer can delete this object.
    viewerCanDelete
    # Can user react to this subject
    viewerCanReact
    # Check if the current viewer can update this object.
    viewerCanUpdate
    # Reasons why the current viewer can not update this comment.
    viewerCannotUpdateReasons
    # Did the viewer author this comment.
    viewerDidAuthor
    comments {
        totalCount
    }
}

# A threaded list of comments for a given pull request.
fragment PullRequestReviewThreadFragment on PullRequestReviewThread {
    id
    # Whether this thread has been resolved
    isResolved
    # The user who resolved this thread
    resolvedBy {
        ... IssuePullRequestTimelineItemUserFragment
    }
    # Identifies the pull request associated with this thread.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # Whether or not the viewer can resolve this thread
    viewerCanResolve
    # Whether or not the viewer can unresolve this thread
    viewerCanUnresolve
}

# Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
#fragment PullRequestRevisionMarkerFragment on PullRequestRevisionMarker {
#    # Identifies the date and time when the object was created.
#    createdAt
#    # The last commit the viewer has seen.
#    lastSeenCommit {
#        ... PullRequestTimelineItemCommitFragment
#    }
#    # The pull request to which the marker belongs.
#    pullRequest {
#        ... PullRequestTimelineItemPullRequest
#    }
#}

# Represents a 'ready_for_review' event on a given pull request.
fragment ReadyForReviewEventFragment on ReadyForReviewEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # PullRequest referenced by event.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # The HTTP URL for this ready for review event.
    url
}

# Represents a 'review_dismissed' event on a given issue or pull request.
fragment ReviewDismissedEventFragment on ReviewDismissedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    # Identifies the optional message associated with the 'review_dismissed' event.
    dismissalMessage
    # Identifies the optional message associated with the event, rendered to HTML.
    dismissalMessageHTML
    id
    # Identifies the previous state of the review with the 'review_dismissed' event.
    previousReviewState
    # Identifies the review associated with the 'review_dismissed' event.
    review {
        ... PullRequestReviewFragment
    }
    # The HTTP URL for this review dismissed event.
    url
}

# Represents an 'review_request_removed' event on a given pull request.
fragment ReviewRequestRemovedEventFragment on ReviewRequestRemovedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # PullRequest referenced by event.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # Identifies the reviewer whose review request was removed.
    requestedReviewer {
        ... IssuePullRequestTimelineItemTeamFragment
        ... IssuePullRequestTimelineItemUserFragment
        ... IssuePullRequestTimelineItemMannequinFragment
    }
}

# Represents an 'review_requested' event on a given pull request.
fragment ReviewRequestedEventFragment on ReviewRequestedEvent {
    # Identifies the actor who performed the event.
    actor {
        ... Actor
    }
    # Identifies the date and time when the object was created.
    createdAt
    id
    # PullRequest referenced by event.
    pullRequest {
        ... PullRequestTimelineItemPullRequest
    }
    # Identifies the reviewer whose review request was removed.
    requestedReviewer {
        ... IssuePullRequestTimelineItemTeamFragment
        ... IssuePullRequestTimelineItemUserFragment
        ... IssuePullRequestTimelineItemMannequinFragment
    }
}