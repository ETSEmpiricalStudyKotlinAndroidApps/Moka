# Information about pagination in a connection.
# https://developer.github.com/v4/object/pageinfo/
fragment PageInfo on PageInfo {
    # When paginating forwards, the cursor to continue.
    endCursor
    # When paginating forwards, are there more items?
    hasNextPage
    # When paginating backwards, are there more items?
    hasPreviousPage
    # When paginating backwards, the cursor to continue.
    startCursor
}

# Represents an object which can take actions on GitHub. Typically a User or Bot.
# https://developer.github.com/v4/interface/actor
fragment Actor on Actor {
    # A URL pointing to the actor's public avatar.
    avatarUrl
    # The username of the actor.
    login
    # The HTTP URL for this actor.
    url
}

# The Code of Conduct for a repository
# https://developer.github.com/v4/object/codeofconduct/
fragment CodeOfConduct on CodeOfConduct {
    # The body of the Code of Conduct
    body
    id
    # The key for the Code of Conduct
    key
    # The formal name of the Code of Conduct
    name
    # The HTTP path for this Code of Conduct
    resourcePath
    # The HTTP URL for this Code of Conduct
    url
}

# Represents an owner of a Repository.
# https://developer.github.com/v4/interface/repositoryowner
fragment RepositoryOwner on RepositoryOwner {
    # A URL pointing to the owner's public avatar.
    avatarUrl
    id
    # The username used to login.
    login
    # The HTTP URL for the owner.
    resourcePath
    # The HTTP URL for the owner.
    url
}

# Represents a given language found in repositories.
# https://developer.github.com/v4/object/language/
fragment Language on Language {
    # The color defined for the current language.
    color
    id
    # The name of the current language.
    name
}

# Describes a License's conditions, permissions, and limitations
# https://developer.github.com/v4/object/licenserule/
fragment LicenseRule on LicenseRule {
    # A description of the rule
    description
    # The machine-readable rule key
    key
    # The human-readable rule label
    label
}

# Represents a Milestone object on a given repository.
# https://developer.github.com/v4/object/milestone
fragment Milestone on Milestone {
    # `true` if the object is closed (definition of closed may depend on type)
    closed
    # Identifies the date and time when the object was closed.
    closedAt
    # Identifies the date and time when the object was created.
    createdAt
    # Identifies the actor who created the milestone.
    creator {
        ... Actor
    }
    # Identifies the description of the milestone.
    description
    # Identifies the due date of the milestone.
    dueOn
    id
    # Just for debugging on review-lab
    issuePrioritiesDebug
    # Identifies the number of the milestone.
    number
    # The HTTP path for this milestone
    resourcePath
    # Identifies the state of the milestone.
    state
    # Identifies the title of the milestone.
    title
    # Identifies the date and time when the object was last updated.
    updatedAt
    # The HTTP URL for this milestone
    url
}

# Represents a Git reference.
# https://developer.github.com/v4/object/ref/
fragment Ref on Ref {
    id
    name
    prefix
    target {
        ... GitObject
    }
}

# Represents a Git object.
# https://developer.github.com/v4/interface/gitobject/
fragment GitObject on GitObject {
    # An abbreviated version of the Git object ID
    abbreviatedOid
    # The HTTP path for this Git object
    commitResourcePath
    # The HTTP URL for this Git object
    commitUrl
    id
    # The Git object ID
    oid
}

# A group of emoji reactions to a particular piece of content.
# https://developer.github.com/v4/object/reactiongroup/
fragment ReactionGroup on ReactionGroup {
    # Identifies the emoji reaction.
    content
    # Identifies when the reaction was created.
    createdAt
    subject {
        ... Reactable
    }
    # Whether or not the authenticated user has left a reaction on the subject.
    viewerHasReacted
}

# Represents a subject that can be reacted on.
# https://developer.github.com/v4/interface/reactable/
fragment Reactable on Reactable {
    id
    # Can user react to this subject
    viewerCanReact
}

# The user's description of what they're currently doing.
# https://developer.github.com/v4/object/userstatus/
fragment UserStatus on UserStatus {
    # Identifies the date and time when the object was created.
    createdAt
    # An emoji summarizing the user's status.
    emoji
    # The status emoji as HTML.
    emojiHTML
    # If set, the status will not be shown after this date.
    expiresAt
    id
    # Whether this status indicates the user is not fully available on GitHub.
    indicatesLimitedAvailability
    # A brief message describing what the user is doing.
    message
    # Identifies the date and time when the object was last updated.
    updatedAt
}

# A user is an individual's account on GitHub that owns repositories and can make new content.
# https://developer.github.com/v4/object/user/
fragment User on User {
    # A URL pointing to the user's public avatar.
    avatarUrl
    # The user's public profile bio.
    bio
    # The user's public profile bio as HTML.
    bioHTML
    # The user's public profile company.
    company
    # The user's public profile company as HTML.
    companyHTML
    # Identifies the date and time when the object was created.
    createdAt
    # The user's publicly visible profile email.
    email
    id
    # Whether or not this user is a participant in the GitHub Security Bug Bounty.
    isBountyHunter
    # Whether or not this user is a participant in the GitHub Campus Experts Program.
    isCampusExpert
    # Whether or not this user is a GitHub Developer Program member.
    isDeveloperProgramMember
    # Whether or not this user is a GitHub employee.
    isEmployee
    # Whether or not the user has marked themselves as for hire.
    isHireable
    # Whether or not this user is a site administrator.
    isSiteAdmin
    # Whether or not this user is the viewing user.
    isViewer
    # The user's public profile location.
    location
    # The username used to login.
    login
    # The user's public profile name.
    name
    # The HTTP path for this user
    resourcePath
    # The user's description of what they're currently doing.
    status {
        ... UserStatus
    }
    # Identifies the date and time when the object was last updated.
    updatedAt
    # The HTTP URL for this user
    url
    # Whether or not the viewer is able to follow the user.
    viewerCanFollow
    # Whether or not this user is followed by the viewer.
    viewerIsFollowing
    # A URL pointing to the user's public website/blog.
    websiteUrl
    repositories {
        totalCount
    }
    followers {
        totalCount
    }
    following {
        totalCount
    }
    starredRepositories {
        totalCount
    }
    organizations(first: 20) {
        nodes {
            avatarUrl
        }
    }
    projects {
        totalCount
    }
}

# A repository's open source license
fragment License on License {
    # The full text of the license
    body
    # The conditions set by the license
    conditions {
        ... LicenseRule
    }
    # A human-readable description of the license
    description
    # Whether the license should be featured
    featured
    # Whether the license should be displayed in license pickers
    hidden
    id
    # Instructions on how to implement the license
    implementation
    # The lowercased SPDX ID of the license
    key
    # The limitations set by the license
    limitations {
        ... LicenseRule
    }
    # The license full name specified by https://spdx.org/licenses
    name
    # Customary short name if applicable (e.g, GPLv3)
    nickname
    # The permissions set by the license
    permissions {
        ... LicenseRule
    }
    # Whether the license is a pseudo-license placeholder (e.g., other, no-license)
    pseudoLicense
    # Short identifier specified by https://spdx.org/licenses
    spdxId
    # URL to the license on https://choosealicense.com
    url
}

# The repository parent, if this is a fork.
# https://developer.github.com/v4/object/repository/
fragment ParentOfForkedRepository on Repository {
    # The HTTP URL for this repository
    url
    # The name of the repository.
    name
    # The repository's name with owner.
    nameWithOwner
}

fragment RepositoryListItemFragment on Repository {
    # The description of the repository.
    description
    # The description of the repository rendered to HTML.
    descriptionHTML
    # The repository's URL.
    homepageUrl
    id
    # Indicates if the repository is unmaintained.
    isArchived
    # Identifies if the repository is a fork.
    isFork
    # Indicates if the repository has been locked or not.
    isLocked
    # Identifies if the repository is a mirror.
    isMirror
    # Identifies if the repository is private.
    isPrivate
    # The repository's original mirror URL.
    mirrorUrl
    # The name of the repository.
    name
    # The repository's name with owner.
    nameWithOwner
    # The User owner of the repository.
    owner {
        ... RepositoryOwner
    }
    # The repository parent, if this is a fork.
    parent {
        ... ParentOfForkedRepository
    }
    # The primary language of the repository's code.
    primaryLanguage {
        ... Language
    }
    # A description of the repository, rendered to HTML without any links in it.
    shortDescriptionHTML
    # The HTTP URL for this repository
    url
    # Returns a boolean indicating whether the viewing user has starred this starrable.
    viewerHasStarred
    forks {
        totalCount
    }
    stargazers {
        totalCount
    }
}

fragment UserListItemFragment on User {
    # A URL pointing to the user's public avatar.
    avatarUrl
    # The user's public profile bio.
    bio
    # The user's public profile bio as HTML.
    bioHTML
    id
    # Whether or not this user is the viewing user.
    isViewer
    # The username used to login.
    login
    # The user's public profile name.
    name
    # The HTTP URL for this user
    url
    # Whether or not the viewer is able to follow the user.
    viewerCanFollow
    # Whether or not this user is followed by the viewer.
    viewerIsFollowing
}

fragment OrganizationListItemFragment on Organization {
    # A URL pointing to the organization's public avatar.
    avatarUrl
    # The organization's public profile description.
    description
    # The organization's public profile description rendered to HTML.
    descriptionHTML
    id
    # Whether the organization has verified its profile email and website.
    isVerified
    # The organization's login name.
    login
    # The organization's public profile name.
    name
    # The HTTP URL for this organization.
    url
    # Viewer is an active member of this organization.
    viewerIsAMember
    # The organization's public profile URL.
    websiteUrl
}

fragment Topic on Topic {
    id
    # The topic's name.
    name
    # Returns a boolean indicating whether the viewing user has starred this starrable.
    viewerHasStarred
}

fragment RepositoryTopic on RepositoryTopic {
    id
    # The HTTP path for this repository-topic.
    resourcePath
    # The topic.
    topic {
        ... Topic
    }
    # The HTTP URL for this repository-topic.
    url
}